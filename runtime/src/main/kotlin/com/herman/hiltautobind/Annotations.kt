package com.herman.hiltautobind

import dagger.hilt.components.SingletonComponent
import kotlin.reflect.KClass

/**
 * AutoBind is an annotation that can be used to automatically bind a class to a specific supertype in a Hilt module.
 *
 * ## Usage
 * Annotate your class with `@AutoBind` to indicate that this class is the implementation detail of the supertype
 *
 * ### Example
 * #### Interface and Implementation
 * Define an interface and its implementation. Annotate the implementation with `@AutoBind` to enable automatic binding.
 * ```kotlin
 * interface Something
 *
 * @Singleton
 * @AutoBind
 * internal class SomethingImpl : Something
 * ```
 *
 * #### Generated Hilt Module
 * The annotation processor generates a Hilt module that binds the `SomethingImpl` class to the `Something` interface.
 * ```kotlin
 * @Module
 * @InstallIn(SingletonComponent::class)
 * internal interface SomethingImpl_SingletonComponent_Module {
 *   @Binds
 *   @Singleton
 *   fun bindSomethingImpl(implementation: SomethingImpl): Something
 * }
 * ```
 *
 * ### Multiple supertypes
 * If the class has multiple supertypes, you can specify the supertype to bind to using the `superType` parameter.
 * Otherwise, the first supertype will be used. If class has no super types, the annotation processor will
 * throw an error.
 *
 * ### Component
 * By default, the factory is generated for the [SingletonComponent].
 * You can specify a different component using the `component` parameter.
 *
 * ### Visibility
 * The generated module will have the same visibility as the annotated class.
 */
@Target(AnnotationTarget.CLASS)
@Retention(AnnotationRetention.BINARY)
@MustBeDocumented
annotation class AutoBind(
    val component: KClass<*> = SingletonComponent::class,
    val superType: KClass<*> = Any::class
)

/**
 * Same as [AutoBind] but for testing with Hilt
 * ## Usage
 * Annotate your class with `@TestAutoBind` to indicate that this class is the implementation detail of the supertype
 *
 * ### Example
 * #### Interface and Implementation
 * ```kotlin
 * interface Something
 *
 * @Singleton
 * @TestAutoBind
 * internal class SomethingImpl : Something
 * ```
 * ### Generated Hilt Module
 * The annotation processor generates a Hilt module that binds the `SomethingImpl` class to the `Something` interface.
 * ```kotlin
 * @Module
 * @TestInstallIn(
 * components = [SingletonComponent::class],
 * replaces = [SomethingImpl_SingletonComponent_Module::class]
 * )
 * internal interface SomethingImpl_SingletonComponent_Module {
 *   @Binds
 *   @Singleton
 *   fun bindSomethingImpl(implementation: SomethingImpl): Something
 * }
 * ```
 * Note that this will automatically replace the module generated by the [AutoBind] annotation.
 *
 * @see AutoBind
 */
@Target(AnnotationTarget.CLASS)
@Retention(AnnotationRetention.BINARY)
@MustBeDocumented
annotation class TestAutoBind(
    val component: KClass<*> = SingletonComponent::class,
    val superType: KClass<*> = Any::class
)

/**
 * AutoFactory is an annotation that can be used to automatically generate a biding for a class, based on the factory function
 * In other words generates the entire hilt module based on a simple function, without the Module boilerplate.
 *
 * ## Usage
 * Annotate any function with `@AutoFactory` to generate a Hilt module that binds the
 * annotated function to its return type.
 *
 * ### Example
 * #### Factory
 * ```kotlin
 * interface Something
 *
 * @Singleton
 * @AutoFactory
 * fun ProvidesSomething(): Something = SomethingImpl(someString)
 *
 * class SomethingImpl(string: String) : Something
 * ```
 *
 * #### Generated Factory
 * The annotation processor generates a factory for the `SomethingImpl` class.
 * ```kotlin
 * @Module
 * @InstallIn(SingletonComponent::class)
 * public object ProvidesSomething_SingletonComponent_AutoFactoryModule {
 *   @Provides
 *   @Singleton
 *   public fun provideProvidesSomething(): Something = ProvidesSomething();
 * }
 * ```
 *
 * ### Component
 * By default, the factory is generated for the [SingletonComponent].
 * You can specify a different component using the `component` parameter.
 *
 * ### Visibility
 * The generated module will have the same visibility as the annotated function.
 */
@Target(AnnotationTarget.FUNCTION)
@Retention(AnnotationRetention.BINARY)
@MustBeDocumented
annotation class AutoFactory(
    val component: KClass<*> = SingletonComponent::class
)

/**
 * Same as [AutoFactory] but for testing with Hilt
 * ## Usage
 * Annotate any function with `@TestAutoFactory` to generate a Hilt module that binds the
 * annotated function to its return type.
 *
 * ### Example
 * #### Factory
 * ```kotlin
 * interface Something
 *
 * @Singleton
 * @TestAutoFactory
 * fun ProvidesSomething(): Something = SomethingImpl(someString)
 *
 * class SomethingImpl(string: String) : Something
 * ```
 *
 * #### Generated Factory
 * The annotation processor generates a factory for the `SomethingImpl` class.
 * ```kotlin
 * @Module
 * @TestInstallIn(
 * components = [SingletonComponent::class],
 * replaces = [ProvidesSomething_SingletonComponent_AutoFactoryModule::class]
 * )
 * public object ProvidesSomething_SingletonComponent_AutoFactoryModule {
 *   @Provides
 *   @Singleton
 *   public fun provideProvidesSomething(): Something = ProvidesSomething();
 * }
 * ```
 * Note that this will automatically replace the module generated by the [AutoFactory] annotation.
 *
 * @see AutoFactory
 */
@Target(AnnotationTarget.FUNCTION)
@Retention(AnnotationRetention.BINARY)
@MustBeDocumented
annotation class TestAutoFactory(
    val component: KClass<*> = SingletonComponent::class
)

/**
 * Use [AutoBindToMap] instead of [dagger.multibindings.IntoMap] in combination with [AutoFactory] or [AutoBind]
 * to automatically bind a class to a map in a Hilt module. Usage is the same as [dagger.multibindings.IntoMap]
 *
 * Usage of [AutoBindToMap] is required if you want to use [AutoFactory] or [AutoBind]
 * in combination with [dagger.multibindings.IntoMap], otherwise the Dagger annotation processor will pick up the
 * annotated type, which will result in an error.
 *
 * @see dagger.multibindings.IntoMap
 * @see <a href="https://dagger.dev/multibindings#map-multibindings">Map multibinding</a>
 */
typealias AutoBindToMap = dagger.multibindings.IntoMap

/**
 * Use [AutoBindToSet] instead of [dagger.multibindings.IntoSet] in combination with [AutoFactory] or [AutoBind]
 * to automatically bind a class to a set in a Hilt module. Usage is the same as [dagger.multibindings.IntoSet]
 *
 * Usage of [AutoBindToSet] is required if you want to use [AutoFactory] or [AutoBind]
 * in combination with [dagger.multibindings.IntoSet], otherwise the Dagger annotation processor will pick up the
 * annotated type, which will result in an error.
 *
 * @see dagger.multibindings.IntoSet
 * @see <a href="https://dagger.dev/multibindings#set-multibindings">Set multibinding</a>
 */
typealias AutoBindToSet = dagger.multibindings.IntoSet

/**
 * Use [AutoBindValuesToSet] instead of [dagger.multibindings.ElementsIntoSet] in combination with [AutoFactory] or [AutoBind]
 * to automatically bind a class to a map in a Hilt module. Usage is the same as [dagger.multibindings.ElementsIntoSet]
 *
 * Usage of [AutoBindValuesToSet] is required if you want to use [AutoFactory] or [AutoBind]
 * , otherwise the Dagger annotation processor will pick up the annotated type, which will result in an error.
 *
 * @see dagger.multibindings.ElementsIntoSet
 * @see <a href="https://dagger.dev/multibindings#map-multibindings">Map multibinding</a>
 */
typealias AutoBindValuesToSet = dagger.multibindings.ElementsIntoSet

/**
 * Use [AutoBindMultiBinds] instead of [dagger.multibindings.Multibinds] in combination with [AutoFactory] or [AutoBind]
 * to automatically bind a class to a set in a Hilt module. Usage is the same as [dagger.multibindings.Multibinds]
 *
 * Usage of [AutoBindMultiBinds] is required if you want to use [AutoFactory] or [AutoBind]
 * in combination with [dagger.multibindings.Multibinds], otherwise the Dagger annotation processor will pick up the
 * annotated type, which will result in an error.
 *
 * @see dagger.multibindings.Multibinds
 * @see <a href="https://dagger.dev/multibindings#multibinds">Multibinding</a>
 */
typealias AutoBindMultiBinds = dagger.multibindings.Multibinds